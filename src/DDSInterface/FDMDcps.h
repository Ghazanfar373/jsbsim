//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: FDMDcps.h
//  Source: FDMData/FDMDcps.idl
//  Generated: Sat Feb 18 13:31:06 2017
//  OpenSplice V5.5.1OSS
//  
//******************************************************************
#ifndef _FDMDCPS_H_
#define _FDMDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "FDM.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"

namespace FDM
{
   struct fdmdata;

   class fdmdataTypeSupportInterface;

   typedef fdmdataTypeSupportInterface * fdmdataTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < fdmdataTypeSupportInterface> fdmdataTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < fdmdataTypeSupportInterface> fdmdataTypeSupportInterface_out;


   class fdmdataDataWriter;

   typedef fdmdataDataWriter * fdmdataDataWriter_ptr;
   typedef DDS_DCPSInterface_var < fdmdataDataWriter> fdmdataDataWriter_var;
   typedef DDS_DCPSInterface_out < fdmdataDataWriter> fdmdataDataWriter_out;


   class fdmdataDataReader;

   typedef fdmdataDataReader * fdmdataDataReader_ptr;
   typedef DDS_DCPSInterface_var < fdmdataDataReader> fdmdataDataReader_var;
   typedef DDS_DCPSInterface_out < fdmdataDataReader> fdmdataDataReader_out;


   class fdmdataDataReaderView;

   typedef fdmdataDataReaderView * fdmdataDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < fdmdataDataReaderView> fdmdataDataReaderView_var;
   typedef DDS_DCPSInterface_out < fdmdataDataReaderView> fdmdataDataReaderView_out;

   struct fdmdataSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < fdmdata, struct fdmdataSeq_uniq_> fdmdataSeq;
   typedef DDS_DCPSSequence_var < fdmdataSeq> fdmdataSeq_var;
   typedef DDS_DCPSSequence_out < fdmdataSeq> fdmdataSeq_out;
   class fdmdataTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef fdmdataTypeSupportInterface_ptr _ptr_type;
      typedef fdmdataTypeSupportInterface_var _var_type;

      static fdmdataTypeSupportInterface_ptr _duplicate (fdmdataTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static fdmdataTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static fdmdataTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static fdmdataTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      fdmdataTypeSupportInterface_ptr _this () { return this; }


   protected:
      fdmdataTypeSupportInterface () {};
      ~fdmdataTypeSupportInterface () {};
   private:
      fdmdataTypeSupportInterface (const fdmdataTypeSupportInterface &);
      fdmdataTypeSupportInterface & operator = (const fdmdataTypeSupportInterface &);
   };

   class fdmdataDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef fdmdataDataWriter_ptr _ptr_type;
      typedef fdmdataDataWriter_var _var_type;

      static fdmdataDataWriter_ptr _duplicate (fdmdataDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static fdmdataDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static fdmdataDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static fdmdataDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      fdmdataDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const fdmdata& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const fdmdata& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const fdmdata& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const fdmdata& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const fdmdata& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const fdmdata& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const fdmdata& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const fdmdata& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const fdmdata& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const fdmdata& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (fdmdata& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const fdmdata& instance_data) = 0;

   protected:
      fdmdataDataWriter () {};
      ~fdmdataDataWriter () {};
   private:
      fdmdataDataWriter (const fdmdataDataWriter &);
      fdmdataDataWriter & operator = (const fdmdataDataWriter &);
   };

   class fdmdataDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef fdmdataDataReader_ptr _ptr_type;
      typedef fdmdataDataReader_var _var_type;

      static fdmdataDataReader_ptr _duplicate (fdmdataDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static fdmdataDataReader_ptr _narrow (DDS::Object_ptr obj);
      static fdmdataDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static fdmdataDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      fdmdataDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (fdmdata& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (fdmdata& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (fdmdata& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const fdmdata& instance) = 0;

   protected:
      fdmdataDataReader () {};
      ~fdmdataDataReader () {};
   private:
      fdmdataDataReader (const fdmdataDataReader &);
      fdmdataDataReader & operator = (const fdmdataDataReader &);
   };

   class fdmdataDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef fdmdataDataReaderView_ptr _ptr_type;
      typedef fdmdataDataReaderView_var _var_type;

      static fdmdataDataReaderView_ptr _duplicate (fdmdataDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static fdmdataDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static fdmdataDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static fdmdataDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      fdmdataDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (fdmdata& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (fdmdata& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (fdmdataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (fdmdata& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const fdmdata& instance) = 0;

   protected:
      fdmdataDataReaderView () {};
      ~fdmdataDataReaderView () {};
   private:
      fdmdataDataReaderView (const fdmdataDataReaderView &);
      fdmdataDataReaderView & operator = (const fdmdataDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
