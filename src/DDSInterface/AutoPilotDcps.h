//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: AutoPilotDcps.h
//  Source: AutoPilotData/AutoPilotDcps.idl
//  Generated: Mon Jan  9 16:42:13 2017
//  OpenSplice V5.5.1OSS
//  
//******************************************************************
#ifndef _AUTOPILOTDCPS_H_
#define _AUTOPILOTDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "AutoPilot.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"

namespace AutoPilot
{
   struct AutoPilotData;

   class AutoPilotDataTypeSupportInterface;

   typedef AutoPilotDataTypeSupportInterface * AutoPilotDataTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AutoPilotDataTypeSupportInterface> AutoPilotDataTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AutoPilotDataTypeSupportInterface> AutoPilotDataTypeSupportInterface_out;


   class AutoPilotDataDataWriter;

   typedef AutoPilotDataDataWriter * AutoPilotDataDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AutoPilotDataDataWriter> AutoPilotDataDataWriter_var;
   typedef DDS_DCPSInterface_out < AutoPilotDataDataWriter> AutoPilotDataDataWriter_out;


   class AutoPilotDataDataReader;

   typedef AutoPilotDataDataReader * AutoPilotDataDataReader_ptr;
   typedef DDS_DCPSInterface_var < AutoPilotDataDataReader> AutoPilotDataDataReader_var;
   typedef DDS_DCPSInterface_out < AutoPilotDataDataReader> AutoPilotDataDataReader_out;


   class AutoPilotDataDataReaderView;

   typedef AutoPilotDataDataReaderView * AutoPilotDataDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AutoPilotDataDataReaderView> AutoPilotDataDataReaderView_var;
   typedef DDS_DCPSInterface_out < AutoPilotDataDataReaderView> AutoPilotDataDataReaderView_out;

   struct AutoPilotDataSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < AutoPilotData, struct AutoPilotDataSeq_uniq_> AutoPilotDataSeq;
   typedef DDS_DCPSSequence_var < AutoPilotDataSeq> AutoPilotDataSeq_var;
   typedef DDS_DCPSSequence_out < AutoPilotDataSeq> AutoPilotDataSeq_out;
   class AutoPilotDataTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AutoPilotDataTypeSupportInterface_ptr _ptr_type;
      typedef AutoPilotDataTypeSupportInterface_var _var_type;

      static AutoPilotDataTypeSupportInterface_ptr _duplicate (AutoPilotDataTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AutoPilotDataTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AutoPilotDataTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AutoPilotDataTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AutoPilotDataTypeSupportInterface_ptr _this () { return this; }


   protected:
      AutoPilotDataTypeSupportInterface () {};
      ~AutoPilotDataTypeSupportInterface () {};
   private:
      AutoPilotDataTypeSupportInterface (const AutoPilotDataTypeSupportInterface &);
      AutoPilotDataTypeSupportInterface & operator = (const AutoPilotDataTypeSupportInterface &);
   };

   class AutoPilotDataDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AutoPilotDataDataWriter_ptr _ptr_type;
      typedef AutoPilotDataDataWriter_var _var_type;

      static AutoPilotDataDataWriter_ptr _duplicate (AutoPilotDataDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AutoPilotDataDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AutoPilotDataDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const AutoPilotData& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const AutoPilotData& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const AutoPilotData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (AutoPilotData& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const AutoPilotData& instance_data) = 0;

   protected:
      AutoPilotDataDataWriter () {};
      ~AutoPilotDataDataWriter () {};
   private:
      AutoPilotDataDataWriter (const AutoPilotDataDataWriter &);
      AutoPilotDataDataWriter & operator = (const AutoPilotDataDataWriter &);
   };

   class AutoPilotDataDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AutoPilotDataDataReader_ptr _ptr_type;
      typedef AutoPilotDataDataReader_var _var_type;

      static AutoPilotDataDataReader_ptr _duplicate (AutoPilotDataDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AutoPilotDataDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AutoPilotDataDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (AutoPilotData& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (AutoPilotData& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (AutoPilotData& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const AutoPilotData& instance) = 0;

   protected:
      AutoPilotDataDataReader () {};
      ~AutoPilotDataDataReader () {};
   private:
      AutoPilotDataDataReader (const AutoPilotDataDataReader &);
      AutoPilotDataDataReader & operator = (const AutoPilotDataDataReader &);
   };

   class AutoPilotDataDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AutoPilotDataDataReaderView_ptr _ptr_type;
      typedef AutoPilotDataDataReaderView_var _var_type;

      static AutoPilotDataDataReaderView_ptr _duplicate (AutoPilotDataDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AutoPilotDataDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AutoPilotDataDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AutoPilotDataDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (AutoPilotData& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (AutoPilotData& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (AutoPilotDataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (AutoPilotData& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const AutoPilotData& instance) = 0;

   protected:
      AutoPilotDataDataReaderView () {};
      ~AutoPilotDataDataReaderView () {};
   private:
      AutoPilotDataDataReaderView (const AutoPilotDataDataReaderView &);
      AutoPilotDataDataReaderView & operator = (const AutoPilotDataDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
